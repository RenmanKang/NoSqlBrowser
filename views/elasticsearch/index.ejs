<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="shortcut icon" href="/favicon.ico" />
	<link rel="stylesheet" href="/lib/bootstrap-3.3.4/css/bootstrap.min.css" />
	<link rel="stylesheet" href="/lib/bootstrap-table/bootstrap-table.min.css" />
	<link rel="stylesheet" href="/lib/bootstrap-select/css/bootstrap-select.min.css" />
	<link rel="stylesheet" href="/lib/jstree-3.2.1/themes/proton/style.min.css" />
	<link rel="stylesheet" href="/lib/codemirror/codemirror.css">
	<link rel="stylesheet" href="/lib/codemirror/theme/rubyblue.css">
	<link rel="stylesheet" href="/lib/codemirror/theme/xq-light.css">
	<link rel="stylesheet" href="/css/style.css" />
	<style>
		.tree ul { margin-left: 6px; }
		#tree { position:fixed; top:56px; left:5px; width:300px; border-right:1px solid #ddd; z-index:1; }
		#esTree { overflow:scroll; height:800px; }
		#sidebarResize {
			background-color: transparent; border: 10px solid transparent; cursor: col-resize;
			height: 100%; position: absolute; right: -11px; top: 0; width: 1px;
		}
		#content { position: fixed; overflow: scroll; left: 305px; padding: 15px 20px; margin: 0; width: 100%; height: 100%; }
		.param-box, .query-box, .exec-box, .result-box { margin-top: 6px; }
		.query-box textarea { width:100%;height:60px;margin-top:6px;padding:4px;line-height:1.6; }
		.query-box .CodeMirror { height: auto; border: 1px solid #aaa; }
		.result-box .CodeMirror { border: 1px solid #aaa; }
		.jstree-contextmenu { z-index:999; }
		.popover { max-width: none; }
		.table { margin-bottom:0; font-size:13px; }
		.table th { text-align: right; font-weight: normal; }
		.table td { min-width: 100px; text-align: center; }
		.close-tab { margin-left:4px; float:none; font-size: 14px; }
		.pg-prev, .pg-next { width:40px;height:22px;padding-top:0;text-align:center; }
		.left { float: left; }
	</style>
</head>
<body>
<% include ../common/gnb %>
<div>
	<div class="tree" id="tree" style="background-color:#fff;">
		<div style="margin-bottom:4px;"><h4 id="server" style="cursor:pointer;margin:2px 0;"><%= server %>(<span class="cluster_name"></span>)</h4></div>
		<div style="margin:4px 0;">
			<div class="input-group input-group-sm" style="margin:0 4px 0 0">
				<input type="text" class="form-control" id="search_path" value=''/>
				<span class="input-group-btn">
					<button type="button" class="btn btn-info" id="search-btn" title="<%= __('Search') %>">
						<i class="glyphicon glyphicon-search"></i>
					</button>
				</span>
				<span class="input-group-btn">
					<button type="button" class="btn btn-info" id="refresh-btn" title="<%= __('Refresh') %>">
						<i class="glyphicon glyphicon-refresh"></i>
					</button>
				</span>
			</div>
		</div>
		<div id="esTree"></div>
		<div id="sidebarResize"></div>
	</div>
	<div id="content" class= "content" style="">
		<div id="alert-div"></div>
		<div role="tabpanel">
			<!-- Nav tabs -->
			<ul class="nav nav-tabs" role="tablist">
				<li role="presentation" class="active">
					<a href="#es_home" aria-controls="es_home" id="es_home__anc" role="tab" data-toggle="tab">
						<span class="glyphicon glyphicon-home"></span> <span class="cluster_name"></span><span class="cluster_status"></span>
					</a>
				</li>
			</ul>
			<!-- Tab panes -->
			<div class="tab-content">
				<div role="tabpanel" class="tab-pane active" id="es_home">
					<div class="result-box">
						<textarea class="span9" id="es_home__res" name="result" style="display:none;"></textarea>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="del-confirm" tabindex="-1" role="dialog" aria-labelledby="del-model-label" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="del-model-label"></h4>
			</div>
			<div class="modal-body" id="del-model-body">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
				<button type="button" class="btn btn-primary" id="del-btn"><%= __('Delete') %></button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="add-idx" tabindex="-1" role="dialog" data-backdrop="static" aria-labelledby="add-idx-label" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="add-idx-label"><%= __('Create Index') %></h4>
			</div>
			<div class="modal-body">
				<input type="text" id="add-idx-index" name="index" class="form-control"/>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
				<button type="button" class="btn btn-primary" id="add-idx-btn"><%= __('Save') %></button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="add-doc" tabindex="-1" role="dialog" data-backdrop="static" aria-labelledby="add-doc-label" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="add-doc-label"><%= __('Add Document') %></h4>
			</div>
			<div class="modal-body">
				<input type="hidden" name="add-doc-idx" id="add-doc-idx" />
				<form id="add-doc-form">
					<textarea id="add-doc-data" name="document"></textarea>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
				<button type="button" class="btn btn-primary" id="add-doc-btn"><%= __('Save') %></button>
			</div>
		</div>
	</div>
</div>

<% include ../common/modals %>
<% include ../common/script %>
<script type="text/javascript" src="/lib/bootstrap-table/bootstrap-table.js"></script>
<script type="text/javascript" src="/lib/bootstrap-table/locale/bootstrap-table-ko-KR.min.js"></script>
<script type="text/javascript" src="/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
<script type="text/javascript" src="/lib/jstree-3.2.1/jstree.min.js"></script>
<script type="text/javascript" src="/lib/codemirror/codemirror.js"></script>
<script type="text/javascript" src="/lib/codemirror/jquery.codemirror.js"></script>
<script type="text/javascript" src="/lib/codemirror/addon/selection/active-line.js"></script>
<script type="text/javascript" src="/lib/codemirror/addon/edit/matchbrackets.js"></script>
<script type="text/javascript" src="/lib/codemirror/mode/javascript/javascript.js"></script>
<script type="text/javascript">
	var selectedNodes = [];
	var nodeSrchTid = false;
	var queryBox = {};
	var resultBox = {};
	var docCodeMirror;
	var curTabId;

	$(function () {
		resultBox['es_home'] = $('#es_home__res').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: true,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			readOnly: true,
			theme: 'rubyblue'
		});
		selectTab('es_home');
		es_api.getClusterHealth();

		loadTree();
		setupResizeEvents();

		$('#server').on('click', function() {
			es_api.getClusterHealth();
		}).on('mouseover', function() {
			$(this).css('color', '#76b6ec');
		}).on('mouseout', function() {
			$(this).css('color', '#333');
		})

		$('#refresh-btn').on('click', reloadTree);

		$('.nav-tabs').on('click', 'a', function(e) {
			e.preventDefault();
			if(!$(this).hasClass('add-contact')) {
				$(this).tab('show');
			}
		}).on('click', '.close-tab', function() {
			closeTab($(this).parents('a'));
		});

		$('#add-idx-btn').on('click', es_api.createIndexProc);
		$('#add-doc-btn').on('click', es_api.addIndexDocumentProc);

		$('body').on('click', function(e) {
			if($(e.target).attr('data-toggle') !== 'popover' && !$(e.target).closest('.popover').length) {
				$('[data-toggle="popover"]').popover('hide');
			}
		});
	});

	function closeTab(anchor) {
		if(anchor && anchor.length) {
			$(anchor.attr('href')).remove();
			anchor.parent().remove();
			$(".nav-tabs li").children('a').last().click();
		}
	}

	function loadTree() {
		$('#esTree').jstree({
			core: {
				data: {
					url: '/api/elasticsearch/tree?_new=1',
					dataType: 'json',
					data: function (node) { return { index : node.text }; }
				},
				multiple: false,
				check_callback: true,
				themes: { name: 'proton', responsive: true }
			},
			dnd: {
				check_while_dragging: false
			},
			contextmenu: {
				items: context_menu
			},
			plugins: [ 'search', 'dnd', 'contextmenu' ]
		}).bind('loaded.jstree', function(e, data) {
			$('#search_path').on('keydown', checkSearchAct);
			$('#search-btn').on('click', searchNode);
			resizeApp();
		}).bind('open_node.jstree', function (e, data) {
			if(data.node && data.node.a_attr && data.node.a_attr.role === 'group') {
				$('#'+data.node.id+'_anchor > i').removeClass('glyphicon-folder-close').addClass('glyphicon-folder-open');
			}
		}).bind('close_node.jstree', function (e, data) {
			if(data.node && data.node.a_attr && data.node.a_attr.role === 'group') {
				$('#'+data.node.id+'_anchor > i').removeClass('glyphicon-folder-open').addClass('glyphicon-folder-close');
			}
		}).bind('changed.jstree', function (e, data) {
		}).bind('select_node.jstree', function(e, data) {
			if(data.node && data.node.a_attr && data.node.a_attr.role) {
				var role = data.node.a_attr.role;
				if(!data.event || data.event.button !== 2) {
					if(role === 'cluster') {
						es_api.getClusterHealth();
					} else if(role === 'group') {
						//$('#esTree').jstree(true).toggle_node(data.node);
						//if(data.node.text === 'Templates') {
						//	es_api.getTemplate();
						//}
					} else if(role === 'index') {
						es_api.getIndexDocuments(data.node.text);
					} else if(role === 'type') {
						es_api.getIndexDocuments(data.node.a_attr.parent, data.node.text);
					} else if(role === 'template') {
						es_api.getTemplate(data.node.text);
					}
				}
			}
		}).bind('search.jstree', function(e, data) {
			if(data.res) {
				data.res.forEach(function(nid, idx) {
					var pid = '';
					if(data.nodes[idx].parentNode && data.nodes[idx].parentNode.parentNode) {
						pid = data.nodes[idx].parentNode.parentNode.id;
					}
					(!pid || pid === 'esTree') && (pid = '');
					$('#esTree').jstree('move_node', '#'+nid, '#'+pid, idx);
					$('#'+nid+'_anchor').addClass('jstree-search');
					selectedNodes.push(nid);
				});
			}
		}).bind('move_node.jstree', function(e, data) {
			selectedNodes.forEach(function(nid) {
				$('#'+nid+'_anchor').addClass('jstree-search');
			});
		}).bind('create_node.jstree', function (e, data) {
		}).bind('rename_node.jstree', function (e, data) {
		}).bind('delete_node.jstree', function(e, data) {
			//var index = data.node.text;
			//es_api.deleteIndex(index);
		});
	}

	function reloadTree() {
		$('#esTree').jstree().refresh();
	}

	function checkSearchAct(e) {
		if(e.charCode == 13 || e.keyCode == 13) {
			e.preventDefault();
			searchNode(e);
		}
	}
	function searchNode(e) {
		var val = $('#search_path').val();
		if(!JSComm.isEmpty(val)) {
			if(nodeSrchTid) { clearTimeout(nodeSrchTid); }

			val = val.trim();
			if(val.length < 2) return;

			nodeSrchTid = setTimeout(function () {
				$('.jstree-anchor').removeClass('jstree-search');
				selectedNodes = [];
				$('#esTree').jstree(true).search(val);
			}, 250);
		} else {
			selectedNodes = [];
			$('#esTree').jstree(true).clear_search();
		}
	}

	function context_menu(node) {
		var tree = $('#esTree').jstree(true);
		var CtxMenu = {
			"cluster": {
				"health": {
					"separator_before": false,
					"separator_after": false,
					"label": "Cluster Health",
					"action": function (obj) {
						es_api.getClusterHealth();
					}
				},
				"stats": {
					"separator_before": false,
					"separator_after": false,
					"label": "Cluster Stats",
					"action": function (obj) {
						es_api.getClusterStats();
					}
				},
				"state": {
					"separator_before": false,
					"separator_after": false,
					"label": "Cluster State",
					"action": function (obj) {
						es_api.getClusterState();
					}
				},
				"getTemplate": {
					"separator_before": true,
					"separator_after": false,
					"label": "Get Template",
					"action": function(obj) {
						es_api.getTemplate();
					}
				},
				"c_index": {
					"separator_before": true,
					"separator_after": false,
					"label": "Create Index",
					"action": function (obj) {
						es_api.createIndex();
					}
				}
			},
			"group": {
				"getAlias": {
					"separator_before": false,
					"separator_after": false,
					"label": "Get Alias",
					"action": function (obj) {
						node.text !== 'etc' && es_api.getIndexAlias('group', node.text);
					}
				},
				"c_index": {
					"separator_before": true,
					"separator_after": false,
					"label": "Create Index",
					"action": function (obj) {
						if(node.text !== 'etc') {
							es_api.createIndex(node.text+'-');
						} else {
							es_api.createIndex();
						}
					}
				}
			},
			"index": {
				"docs": {
					"separator_before": false,
					"separator_after": false,
					"label": "Get Documents",
					"action": function (obj) {
						es_api.getIndexDocuments(node.text);
					}
				},
				"addDocs": {
					"separator_before": false,
					"separator_after": false,
					"label": "Add Document",
					"action": function (obj) {
						es_api.addIndexDocument(node.text);
					}
				},
				"status": {
					"separator_before": true,
					"separator_after": false,
					"label": "Index Status",
					"action": function (obj) {
						es_api.getIndexStatus(node.text);
					}
				},
				"stats": {
					"separator_before": false,
					"separator_after": false,
					"label": "Index Stats",
					"action": function (obj) {
						es_api.getIndexStats(node.text);
					}
				},
				"getMapping": {
					"separator_before": false,
					"separator_after": false,
					"label": "Get Mapping",
					"action": function(obj) {
						es_api.getIndexMapping(node.text);
					}
				},
				"getAlias": {
					"separator_before": false,
					"separator_after": false,
					"label": "Get Alias",
					"action": function (obj) {
						es_api.getIndexAlias('index', node.text);
					}
				},
				/*
				"putAlias": {
					"separator_before": false,
					"separator_after": false,
					"label": "Put Alias",
					"action": function (obj) {
						es_api.putIndexAlias(node.text);
					}
				},
				"deleteAlias": {
					"separator_before": false,
					"separator_after": false,
					"label": "Delete Alias",
					"action": function (obj) {
						es_api.deleteIndexAlias(node.text);
					}
				},
				*/
				"deleteIndex": {
					"separator_before": true,
					"separator_after": false,
					"label": "Delete Index",
					"action": function (obj) {
						var title = "<%= __('Delete Index') %> :: "+node.text;
						var msg = "<%= __('Are you sure you want to delete this index?') %>";
						es_api.deleteIndex(node, title, msg);
					}
				}
			},
			"type": {
				"docs": {
					"separator_before": false,
					"separator_after": false,
					"label": "Get Documents",
					"action": function (obj) {
						es_api.getIndexDocuments(node.a_attr.parent, node.text);
					}
				},
				"addDocs": {
					"separator_before": false,
					"separator_after": false,
					"label": "Add Document",
					"action": function (obj) {
						es_api.addIndexDocument(node.a_attr.parent, node.text);
					}
				}
			},
			"template": {
				"getTemplate": {
					"separator_before": true,
					"separator_after": false,
					"label": "Get Template",
					"action": function(obj) {
						es_api.getTemplate(node.text);
					}
				}/*,
				"putTemplate": {
					"separator_before": false,
					"separator_after": false,
					"label": "Put Template",
					"action": function(obj) {
						es_api.putTemplate(node.text);
					}
				},
				"deleteTemplate": {
					"separator_before": false,
					"separator_after": false,
					"label": "Delete Template",
					"action": function(obj) {
						es_api.deleteTemplate(node.text);
					}
				}*/
			}
		};
		var menu = CtxMenu[node.a_attr.role];
		node.a_attr.role === 'group' && node.text === 'etc' && delete menu.getAlias;
		return (node.a_attr.role === 'group' && node.text === 'Templates') ? null : menu;
	}

	function selectTab(tabId) {
		curTabId = tabId;
		resizeResultBox(tabId);
	}

	function getTabId(val, prefix, suffix) {
		var tabId = btoa(val).replace(/[=]/g, '_');
		prefix && (tabId = prefix+tabId);
		suffix && (tabId = tabId+suffix);
		return tabId;
	}

	var es_api = {
		getClusterHealth: function() {
			var tabId = 'es_home';
			$.get('/api/elasticsearch/cluster/health', function(result) {
				if(result.status === 200) {
					$('.cluster_name').text(result.c_name);
					$('.cluster_status').text('('+result.c_status+')');
					resultBox[tabId].getDoc().setValue(result.data);
				} else {
					$('.cluster_name').css('color','red').text('RED');
					resultBox[tabId].getDoc().setValue('{\n\t"status": '+(result.status || 500)+'\n\t"error": "'+result.message+'"\n}');
				}
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			});
		},
		getClusterStats: function() {
			var tabId = 'es_home';
			$.get('/api/elasticsearch/cluster/stats', function(result) {
				if(result.status === 200) {
					$('.cluster_name').text(result.c_name);
					$('.cluster_status').text('('+result.c_status+')');
					resultBox[tabId].getDoc().setValue(result.data);
				} else {
					resultBox[tabId].getDoc().setValue('status:'+result.status+'\nerror:'+result.message);
				}
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			});
		},
		getClusterState: function() {
			var tabId = 'es_home';
			$.get('/api/elasticsearch/cluster/state', function(result) {
				if(result.status === 200) {
					$('.cluster_name').text(result.c_name);
					resultBox[tabId].getDoc().setValue(result.data);
				} else {
					resultBox[tabId].getDoc().setValue('status:'+result.status+'\nerror:'+result.message);
				}
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			});
		},
		createIndex: function(prefix) {
			!prefix && (prefix = '');
			$('#add-idx-index').val(prefix);
			$('#add-idx').modal('show');
			$('#add-idx').on('shown.bs.modal', function() {
				$('#content').css('position', 'absolute');
			});
			$('#add-idx').on('hidden.bs.modal', function() {
				$('#content').css('position', 'fixed');
			});
		},
		createIndexProc: function() {
			var index = $('#add-idx-index').val();
			if(JSComm.isEmpty(index)) {
				$('#alertModalBody').html("<p><%= __('index name required') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			$.ajax({
				type: 'post',
				url: '/api/elasticsearch/indices/'+index,
				success: function(result) {
					$('#add-idx').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.status === 200) {
						reloadTree();
					} else {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				},
				error: function(result) {
					console.log(result);
					$('#add-idx').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.message) {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				}
			});
		},
		deleteIndex: function(node, title, msg) {
			//var tree = $('#esTree').jstree(true);
			$('#del-btn').unbind('click');
			$('#del-btn').bind('click', function(e) {
				es_api.deleteIndexProc(node)
				//tree.delete_node(node);
			});
			$('#del-model-label').text(title);
			$('#del-model-body').text(msg);
			$('#del-confirm').modal('show').on('shown.bs.modal', function() {
				$('#content').css('position', 'absolute');
			}).on('hidden.bs.modal', function() {
				$('#content').css('position', 'fixed');
			});
		},
		deleteIndexProc: function(node) {
			var index = node.text;
			if(!index) {
				$('#alertModalBody').html("<p><%= __('index name required') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			$.ajax({
				type: 'delete',
				url: '/api/elasticsearch/indices/'+index,
				success: function(result) {
					$('#del-confirm').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.status === 200) {
						var tabId = getTabId(index, 'idx__');
						(curTabId === tabId) && closeTab($('#'+tabId+'__anc'));
						$('#esTree').jstree(true).delete_node(node);
						reloadTree();
					} else {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				},
				error: function(result) {
					console.log(result);
					$('#del-confirm').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.message) {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				}
			});
		},
		getIndexStatus: function(index) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var tabId = getTabId(index, 'status__');
			if($('#'+tabId).length === 0) {
				$.get('/api/elasticsearch/indices/status/'+index+'?tabId='+tabId, function(result) {
					renderResult(tabId, 'status: '+index, result);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		getIndexStats: function(index) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var tabId = getTabId(index, 'stats__');
			if($('#'+tabId).length === 0) {
				$.get('/api/elasticsearch/indices/stats/'+index+'?tabId='+tabId, function(result) {
					renderResult(tabId, 'stats: '+index, result);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		getIndexDocuments: function(index, type) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var tabId = type ? getTabId(index, 'type__')+'__'+getTabId(type) : getTabId(index, 'idx__');
			if($('#'+tabId).length === 0) {
				var url = '/api/elasticsearch/search/' + index;
				type && (url += '/'+type);
				$.get(url, function (html) {
					renderDocument(tabId, index, type, html);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		addIndexDocument: function(index, type) {
			$('#add-doc-data').val('{\n\t"index": "'+index+'",\n\t"type": "'+(type || 'MyType')+'",\n\t"body": {\n\t}\n}');
			if(!docCodeMirror) {
				docCodeMirror = $('#add-doc-data').codemirror({
					mode: { name:'javascript', json:true },
					lineNumbers: true,
					styleActiveLine: true,
					autoClearEmptyLines: true,
					matchBrackets: true,
					theme: 'rubyblue'
				});
			} else {
				docCodeMirror.getDoc().setValue($('#add-doc-data').val());
				docCodeMirror.refresh();
			}
			$('#add-doc-idx').val(index);
			$('#add-doc').modal('show');
			$('#add-doc').on('shown.bs.modal', function() {
				docCodeMirror.refresh();
				$('#content').css('position', 'absolute');
			});
			$('#add-doc').on('hidden.bs.modal', function() {
				$('#content').css('position', 'fixed');
			});
		},
		addIndexDocumentProc: function() {
			var index = $('#add-doc-idx').val();
			if(JSComm.isEmpty(index)) {
				$('#alertModalBody').html("<p><%= __('You must select target index to add a document!') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			var data = docCodeMirror && docCodeMirror.getDoc().getValue();
			if(JSComm.isEmpty(data)) {
				$('#alertModalBody').html("<p><%= __('You forgot to enter a document!') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			$('#add-doc-data').val(data);
			$.ajax({
				type: 'post',
				url: '/api/elasticsearch/indices/docs/'+index,
				data: $('#add-doc-form').serialize(),
				success: function(result) {
					$('#add-doc').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if([200, 201].indexOf(result.status) !== -1) {
						reloadTree();
					} else {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				},
				error: function(result) {
					console.log(result);
					$('#add-doc').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.message) {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				}
			});
		},
		getTemplate: function(template) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var tabTitle = 'Template';
			var tabId = 'temp__';
			var url = '/api/elasticsearch/templates';

			if(template) {
				tabTitle += ': '+template;
				tabId += getTabId(template);
				url += '/'+template;
			} else {
				tabTitle = 'Templates';
			}
			url += '?tabId='+tabId;
			if($('#'+tabId).length === 0) {
				$.get(url, function(result) {
					renderResult(tabId, tabTitle, result);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		putTemplate: function(template) {
			var tabId = 'temp__' + getTabId(template);
		},
		deleteTemplate: function(template) {
			var tabId = 'temp__' + getTabId(template);
		},
		getIndexMapping: function(index) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var tabId = getTabId(index, 'map__');
			if($('#'+tabId).length === 0) {
				$.get('/api/elasticsearch/indices/mapping/'+index+'?tabId='+tabId, function(result) {
					renderResult(tabId, 'mapping: '+index, result);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		putIndexMapping: function(index) {
			var tabId = getTabId(index, 'map__');
		},
		deleteIndexMapping: function(index) {
			var tabId = getTabId(index, 'map__');
		},
		getIndexAlias: function(type, index) {
			$('.nav-tabs li').removeClass('active');
			$('.tab-pane').removeClass('active');

			var path = index;
			type === 'group' && (path += '*');
			var tabId = getTabId(index, 'alias__');
			if($('#'+tabId).length === 0) {
				$.get('/api/elasticsearch/indices/alias/'+path+'?tabId='+tabId, function(result) {
					renderResult(tabId, 'alias: '+index, result);
				});
			} else {
				$('#'+tabId+'__anc').click();
				selectTab(tabId);
			}
		},
		putIndexAlias: function(index) {
			var tabId = getTabId(index, 'alias__');
		},
		deleteIndexAlias: function(index) {
			var tabId = getTabId(index, 'alias__');
		}
	};

	function renderResult(tabId, title, result) {
		(title.length > 30) && (title = title.substring(0, 20) + '...');
		$('.nav-tabs').append('<li role="presentation" class="active"><a href="#'+tabId+'" id="'+tabId+'__anc" aria-controls="'
				+tabId+'" role="tab" data-toggle="tab"><span class="glyphicon glyphicon-stats"></span> '
				+title+'<button class="close-tab close btn btn-xs" type="button"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button></a></li>');
		$('.tab-content').append(result);

		$('#'+tabId+'__anc').on('click', function() {
			$(this).tab('show');
			selectTab($(this).attr('aria-controls'));
		});

		resultBox[tabId] = $('#'+tabId+'__res').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: true,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			readOnly: true,
			theme: 'rubyblue'
		});
		selectTab(tabId);
	}

	function renderDocument(tabId, index, type, html) {
		curTabId = tabId;
		var tabTitle = index;
		if(tabTitle.length > 30) tabTitle = tabTitle.substring(0, 20) + '...';
		$('.nav-tabs').append('<li role="presentation" class="active"><a href="#'+tabId+'" id="'+tabId+'__anc" aria-controls="'
				+tabId+'" role="tab" data-toggle="tab"><span class="glyphicon glyphicon-file"></span> '
				+tabTitle+'<button class="close-tab close btn btn-xs" type="button"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button></a></li>');
		$('.tab-content').append(html);

		$('#'+tabId+'__anc').on('click', function() {
			$(this).tab('show');
			selectTab($(this).attr('aria-controls'));
		});

		$('#'+tabId+'__exec').on('click', function(e) {
			execQuery(tabId, index, type);
		});
		$('#'+tabId+'__prev').on('click', function(e) {
			execQueryPrev(tabId, index, type);
		});
		$('#'+tabId+'__next').on('click', function(e) {
			execQueryNext(tabId, index, type);
		});
		$('#'+tabId+'__from').on('change', function(e) {
			var from = $(this).val();
			execQuery(tabId, index, type, from);
		});

		queryBox[tabId] = $('#'+tabId+'__query').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: false,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			theme: 'xq-light'
		});
		queryBox[tabId].on('changes', function(instance, changes) {
			resizeResultBox(curTabId);
		});
		resultBox[tabId] = $('#'+tabId+'__res').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: true,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			readOnly: true,
			theme: 'rubyblue'
		});

		$('#'+tabId+'__query_btn').on('click', function(e) {
			$(this).parent().find('.CodeMirror').toggle();
			var id = $(this).attr('id');
			selectTab(id.substring(0, id.indexOf('__query_btn')));
		});

		selectTab(tabId);
	}

	function execQuery(tabId, index, type, from, size) {
		!from && (from = 0);
		!size && (size = 50);

		var data;
		var qstr = queryBox[tabId].getDoc().getValue();
		if(qstr && qstr.length) {
			try {
				data = JSON.parse(qstr);
			} catch(err) {
				console.log(err);
				data = {
					"query":{"match_all":{}},
					"sort":[ {"logTime":{"order":"desc","ignoreUnmapped":true}} ]
				}
			}
		}
		var body_data;
		data && (body_data = JSON.stringify(data));

		var url = '/api/elasticsearch/search/'+index;
		type && (url += '/'+type);
		url += '?from='+from+'&size='+size;

		var params = $('#'+tabId+'__param').val();
		if(!JSComm.isEmpty(params)) {
			params = params.trim();
			url += '&'+params;
		}

		$.ajax({
			type: 'post',
			url: url,
			contentType: 'application/json',
			data: body_data,
			success: function(result) {
				var docs = (result.status === 200) ? result.data : result.message;
				resultBox[tabId].getDoc().setValue(docs);
				(from !== undefined) && $('#'+tabId+'__from').val(from);
				(size !== undefined) && $('#'+tabId+'__size').val(size);
			},
			error: function(result) {
				console.log(result);
				if(result.message) {
					BSAlert('danger', result.message, '#alert-div');
				}
			}
		});
	}
	function execQueryPrev(tabId, index, type) {
		var size = parseInt($('#'+tabId+'__size').val() || 50, 10);
		var from = parseInt($('#'+tabId+'__from').val() || 0, 10) - size;
		(from < 0) && (from = 0);
		execQuery(tabId, index, type, from, size);
	}
	function execQueryNext(tabId, index, type) {
		var size = parseInt($('#'+tabId+'__size').val() || 50, 10);
		var from = parseInt($('#'+tabId+'__from').val() || 0, 10) + size;
		execQuery(tabId, index, type, from, size);
	}

	function resizeApp() {
		var barWidth = $('#esTree').outerWidth(true);
		var bodyMargin = parseInt($('#content').css('margin-left'), 10);
		var newBodyWidth = $(window).width() - barWidth - bodyMargin;
		$('#content').css('left', barWidth);
		$('#content').css('width', newBodyWidth);

		$('#esTree').height($(window).height() - $('#esTree').offset().top);
		var contentHeight = $(window).height() - $('#content').offset().top;
		$('#content').css('height', contentHeight);
		$('#sidebarResize').css('height', $('#tree').css('height'));

		resizeResultBox(curTabId);
	}

	function resizeResultBox(tabId) {
		if(!tabId) return;

		var hh = 40;
		var box_list = ['param-box', 'query-box', 'exec-box'];
		var box_h;
		box_list.forEach(function(box) {
			if($('#'+tabId+' .'+box).css('display') !== 'none') {
				box_h = $('#'+tabId+' .'+box).outerHeight(true);
				//box_h = $('#'+tabId+' .'+box).height();
				box_h && (hh += box_h);
			}
		});

		var height = $(window).height() - $('.tab-content').offset().top - hh;
		(height < 300) && (height = 300);

		resultBox[tabId].setSize('100%', height);
	}

	function setupResizeEvents() {
		var sidebarResizing = false;
		var sidebarFrame = $("#tree").width();

		$('#esTree').bind('resize', resizeApp);
		$(window).bind('resize', resizeApp);

		$(document).on('mouseup', function (e) {
			sidebarResizing = false;
			sidebarFrame = $("#tree").width();
			$('body').removeClass('select-disabled');
		});

		$('#sidebarResize').on('mousedown', function (e) {
			sidebarResizing = e.pageX;
			$('body').addClass('select-disabled');
		});

		$(document).on('mousemove', function (e) {
			if(sidebarResizing) {
				var w = sidebarFrame - (sidebarResizing - e.pageX);
				if(w > 240) {
					$('#tree').width(w);
					resizeApp();
				}
			}
		});
	}

</script>
</body>
</html>
