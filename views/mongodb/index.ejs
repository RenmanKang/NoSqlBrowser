<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="shortcut icon" href="/favicon.ico" />
	<link rel="stylesheet" href="/lib/bootstrap-3.3.4/css/bootstrap.min.css" />
	<link rel="stylesheet" href="/lib/bootstrap-table/bootstrap-table.min.css" />
	<link rel="stylesheet" href="/lib/bootstrap-select/css/bootstrap-select.min.css" />
	<link rel="stylesheet" href="/lib/jstree-3.2.1/themes/proton/style.min.css" />
	<link rel="stylesheet" href="/lib/codemirror/codemirror.css">
	<link rel="stylesheet" href="/lib/codemirror/theme/rubyblue.css">
	<link rel="stylesheet" href="/lib/codemirror/theme/xq-light.css">
	<link rel="stylesheet" href="/css/style.css" />
	<style>
		.tree ul { margin-left: 6px; }
		#tree { position:fixed; top:56px; left:5px; width:300px; border-right:1px solid #ddd; z-index:1; }
		#dbTree { overflow:scroll; height:800px; }
		#sidebarResize {
			background-color: transparent; border: 10px solid transparent; cursor: col-resize;
			height: 100%; position: absolute; right: -11px; top: 0; width: 1px;
		}
		#content { position: fixed; overflow: scroll; left: 305px; padding: 15px 20px; margin: 0; width: 100%; height: 100%; }
		.jstree-contextmenu { z-index:999; }
		.popover { max-width: none; }
		.table { margin-bottom:0; font-size:13px; }
		.table th { text-align: right; font-weight: normal; }
		.table td { min-width: 100px; text-align: center; }
		.close-tab { margin-left:4px; float:none; font-size: 14px; }
		.title-box, .query-cmd, .query-box, .doc-box, .opt-box, .exec-box, .result-box { margin-top: 6px; }
		.title-box .breadcrumb { margin-bottom: 0; }
		.query-box textarea, .opt-box textarea, .doc-box textarea { width:100%;height:60px;margin-top:6px;padding:4px;line-height:1.6; }
		.query-box .CodeMirror, .doc-box .CodeMirror, .opt-box .CodeMirror { height: auto; border: 1px solid #aaa; }
		.result-box .CodeMirror { border: 1px solid #aaa; }
		.pg-prev, .pg-next { width:40px;height:22px;padding-top:0;text-align:center; }
		.left { float: left; }
	</style>
</head>
<body>
<% include ../common/gnb %>
<div>
	<div class="tree" id="tree" style="background-color:#fff;">
		<div style="margin-bottom:4px;"><h4 id="server" style="cursor:pointer;margin:2px 0;"><%= mongodb %></h4></div>
		<div style="margin:4px 0;">
			<div class="input-group input-group-sm" style="margin:0 4px 0 0">
				<input type="text" class="form-control" id="search_path" value=''/>
				<span class="input-group-btn">
					<button type="button" class="btn btn-info" id="search-btn" title="<%= __('Search') %>">
						<i class="glyphicon glyphicon-search"></i>
					</button>
				</span>
				<span class="input-group-btn">
					<button type="button" class="btn btn-info" id="refresh-btn" title="<%= __('Refresh') %>">
						<i class="glyphicon glyphicon-refresh"></i>
					</button>
				</span>
			</div>
		</div>
		<div id="dbTree"></div>
		<div id="sidebarResize"></div>
	</div>
	<div id="content" class= "content" style="">
		<div id="alert-div"></div>
		<div role="tabpanel">
			<!-- Nav tabs -->
			<ul class="nav nav-tabs" role="tablist">
				<li role="presentation" class="active">
					<a href="#serverinfo" aria-controls="serverinfo" role="tab" data-toggle="tab"><span class="glyphicon glyphicon-home"></span> Overview</a>
				</li>
			</ul>
			<!-- Tab panes -->
			<div class="tab-content">
				<div role="tabpanel" class="tab-pane active" id="serverinfo">
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="del-confirm" tabindex="-1" role="dialog" aria-labelledby="del-model-label" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="del-model-label"></h4>
			</div>
			<div class="modal-body" id="del-model-body">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
				<button type="button" class="btn btn-primary" id="del-btn"><%= __('Delete') %></button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="add-doc" tabindex="-1" role="dialog" data-backdrop="static" aria-labelledby="add-doc-label" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="add-doc-label"><%= __('Add Document') %></h4>
			</div>
			<div class="modal-body">
				<input type="hidden" name="dbName" id="dbName" />
				<input type="hidden" name="colName" id="colName" />
				<form id="add-doc-form">
					<textarea id="document" name="document">{
	"_id": ObjectID()
}</textarea>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
				<button type="button" class="btn btn-primary" id="add-doc-btn"><%= __('Save') %></button>
			</div>
		</div>
	</div>
</div>

<% include ../common/modals %>
<% include ../common/script %>
<script type="text/javascript" src="/lib/bootstrap-table/bootstrap-table.js"></script>
<script type="text/javascript" src="/lib/bootstrap-table/locale/bootstrap-table-ko-KR.min.js"></script>
<script type="text/javascript" src="/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
<script type="text/javascript" src="/lib/jstree-3.2.1/jstree.min.js"></script>
<script type="text/javascript" src="/lib/codemirror/codemirror.js"></script>
<script type="text/javascript" src="/lib/codemirror/jquery.codemirror.js"></script>
<script type="text/javascript" src="/lib/codemirror/addon/selection/active-line.js"></script>
<script type="text/javascript" src="/lib/codemirror/addon/edit/matchbrackets.js"></script>
<script type="text/javascript" src="/lib/codemirror/mode/javascript/javascript.js"></script>
<script type="text/javascript">
	var queryBox = {};
	var docBox = {};
	var optionBox = {};
	var resultBox = {};
	var curTabId;
	var selectedNodes = [];
	var nodeSrchTid = false;
	var docCodeMirror;

	$(function () {
		loadTree();
		showServerInfo();
		setupResizeEvents();
		$('#server').on('click', function() {
			showServerInfo();
		}).on('mouseover', function() {
			$(this).css('color', '#76b6ec');
		}).on('mouseout', function() {
			$(this).css('color', '#333');
		})

		$('#refresh-btn').on('click', reloadTree);

		$('.nav-tabs').on('click', 'a', function(e) {
			e.preventDefault();
			if(!$(this).hasClass('add-contact')) {
				$(this).tab('show');
			}
		}).on('click', '.close-tab', function() {
			closeTab($(this).parents('a'));
		});

		$('#add-doc-btn').on('click', function() {
			var dbName = $('#dbName').val();
			var colName = $('#colName').val();
			if(JSComm.isEmpty(dbName) || JSComm.isEmpty(colName)) {
				$('#alertModalBody').html("<p><%= __('You must select target collection to add a document!') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			var data = docCodeMirror && docCodeMirror.getDoc().getValue();
			if(JSComm.isEmpty(data)) {
				$('#alertModalBody').html("<p><%= __('You forgot to enter a document!') %></p>");
				$('#alertModel').modal('show');
				return;
			}

			$('#document').val(data);
			$.ajax({
				type: 'post',
				url: '/mongodb/db/'+dbName+'/'+colName+'/add',
				data: $('#add-doc-form').serialize(),
				success: function(result) {
					$('#add-doc').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.status === 200) {
						reloadTree();
						loadDocument(dbName+'/'+colName, true);
					} else {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				},
				error: function(result) {
					console.log(result);
					$('#add-doc').modal('hide').data( 'bs.modal', null );
					$('.modal-backdrop').remove();
					if(result.message) {
						$('#alertModalBody').html('<p>'+result.message+'</p>');
						$('#alertModel').modal('show');
					}
				}
			});
		});

		$('body').on('click', function(e) {
			if($(e.target).attr('data-toggle') !== 'popover' && !$(e.target).closest('.popover').length) {
				$('[data-toggle="popover"]').popover('hide');
			}
		});
	});

	function closeTab(anchor) {
		if(anchor && anchor.length) {
			$(anchor.attr('href')).remove();
			anchor.parent().remove();
			$(".nav-tabs li").children('a').last().click();
		}
	}

	function showServerInfo() {
		$.get('/mongodb/status', function(html) {
			$('#serverinfo').html(html);
		});
	}

	function loadTree() {
		$('#dbTree').jstree({
			core: {
				data: {
					url: '/api/mongodb/tree?_new=1',
					dataType: 'json',
					data: function (node) { return { path : node.id }; }
				},
				multiple: false,
				check_callback: true,
				themes: { name: 'proton', responsive: true }
			},
			dnd: {
				check_while_dragging: false
			},
			contextmenu: {
				items: context_menu
			},
			plugins: [ 'search', 'dnd', 'contextmenu' ]
		}).bind('loaded.jstree', function(e, data) {
			$('#search_path').on('keydown', checkSearchAct);
			$('#search-btn').on('click', searchNode);
			resizeApp();
		})/*.bind('changed.jstree', function (e, data) {
			data.node && data.node.a_attr && loadDocument(data.node.a_attr.role);
		})*/.bind("select_node.jstree", function(e, data) {
			if(data.node) {
				if(data.node.a_attr && data.node.a_attr.role) {
					var role = data.node.a_attr.role;
					if(role === '_new') {
						$('#dbTree').jstree(true).edit(data.node);
					} else {
						if(!data.event || data.event.button !== 2) {
							loadDocument(role);
							$('#dbTree').jstree(true).toggle_node(data.node);
						}
					}
				}
			}
		}).bind('search.jstree', function(e, data) {
			if(data.res) {
				data.res.forEach(function(nid, idx) {
					var pid = '';
					if(data.nodes[idx].parentNode && data.nodes[idx].parentNode.parentNode) {
						pid = data.nodes[idx].parentNode.parentNode.id;
					}
					(!pid || pid === 'dbTree') && (pid = '');
					$('#dbTree').jstree('move_node', '#'+nid, '#'+pid, idx);
					$('#'+nid+'_anchor').addClass('jstree-search');
					selectedNodes.push(nid);
				});
			}
		}).bind('move_node.jstree', function(e, data) {
			selectedNodes.forEach(function(nid) {
				$('#'+nid+'_anchor').addClass('jstree-search');
			});
		}).bind('create_node.jstree', function (e, data) {
		}).bind('rename_node.jstree', function (e, data) {
			var dbName = data.node.parent;
			var colName = data.text;
			(dbName === '#') && (dbName = colName);

			var oldName = data.old;
			if(data.node.a_attr.role === '_new') {
				if(dbName === colName) {
					if(dbName !== oldName) {
						createDatabase(dbName);
					}
				} else {
					createCollection(dbName, colName);
				}
			} else {
				if(colName !== oldName) {
					if(dbName === colName) {
						renameDatabase(oldName, dbName);
					} else {
						renameCollection(dbName, oldName, colName);
					}
				}
			}
		}).bind('delete_node.jstree', function(e, data) {
			var dbName = data.node.parent;
			var colName = data.node.text;
			(dbName === '#') && (dbName = colName);

			if(dbName === colName) {
				deleteContents(dbName);
			} else {
				deleteContents(dbName, colName);
			}
		});
	}

	function reloadTree() {
		$('#dbTree').jstree().refresh();
	}

	function checkSearchAct(e) {
		if(e.charCode == 13 || e.keyCode == 13) {
			e.preventDefault();
			searchNode(e);
		}
	}
	function searchNode(e) {
		var val = $('#search_path').val();
		if(!JSComm.isEmpty(val)) {
			if(nodeSrchTid) { clearTimeout(nodeSrchTid); }

			val = val.trim();
			if(val.length < 2) return;

			nodeSrchTid = setTimeout(function () {
				$('.jstree-anchor').removeClass('jstree-search');
				selectedNodes = [];
				$('#dbTree').jstree(true).search(val);
			}, 250);
		} else {
			selectedNodes = [];
			$('#dbTree').jstree(true).clear_search();
		}
	}

	function context_menu(node) {
		if(node.parent  === '#' && node.a_attr.role === '_new') return null;

		var tree = $('#dbTree').jstree(true);
		var CtxMenu = {
			"db": {
				"CreateCollection": {
					"separator_before": false,
					"separator_after": true,
					"label": "Create Collection",
					"action": function (obj) {
						var n_name = 'coll_'+new Date().getTime();
						var c_node = {id: n_name, text: n_name, a_attr: {role: '_new'}};
						if(tree.is_open(node)) {
							var $node = tree.create_node(node, c_node, 'first');
							tree.edit($node);
						} else {
							tree.open_node(node, function() {
								var $node = tree.create_node(node, c_node, 'first');
								tree.edit($node);
							});
						}
					}
				},
				"DatabaseStatistics": {
					"separator_before": false,
					"separator_after": true,
					"label": "Database Statistics",
					"action": function (obj) {
						showStats(node.text);
					}
				},
				"DropDatabase": {
					"separator_before": false,
					"separator_after": false,
					"label": "Drop Database",
					"action": function (obj) {
						var title = "<%= __('Delete database') %> :: "+node.text;
						var msg = "<%= __('Are you sure you want to delete this database?') %>";
						dropConfirm(node, title, msg);
					}
				}
			},
			"collection": {
				"ViewDocuments": {
					"separator_before": false,
					"separator_after": true,
					"label": "View Documents",
					"action": function (obj) {
						loadDocument(node.parent+'/'+node.text);
					}
				},
				"InsertDocument": {
					"separator_before": false,
					"separator_after": false,
					"label": "Insert Document",
					"action": function (obj) {
						addDocument(node.parent, node.text);
					}
				},
				"UpdateDocuments": {
					"separator_before": false,
					"separator_after": false,
					"label": "Update Documents",
					"action": function (obj) {
						updateDocument(node.parent, node.text);
					}
				},
				"RemoveAllDocuments": {
					"separator_before": false,
					"separator_after": true,
					"label": "Remove All Documents",
					"action": function (obj) {
						var title = "<%= __('Remove Documents') %> :: "+node.text;
						var msg = "<%= __('Are you sure you want to delete all the documents in this collection?') %>";
						removeAllDocuments(node, title, msg);
					}
				},
				"CollectionStatistics": {
					"separator_before": false,
					"separator_after": true,
					"label": "Collection Statistics",
					"action": function (obj) {
						showStats(node.parent, node.text);
					}
				},
				"RenameCollection": {
					"separator_before": false,
					"separator_after": false,
					"label": "Rename Collection",
					"action": function (obj) {
						tree.edit(node);
					}
				},
				"DropCollection": {
					"separator_before": false,
					"separator_after": false,
					"label": "Drop Collection",
					"action": function (obj) {
						var title = "<%= __('Delete collection') %> :: "+node.text;
						var msg = "<%= __('Are you sure you want to delete this collection? All documents will be deleted.') %>";
						dropConfirm(node, title, msg);
					}
				}
			}
		};
		var items = node.parent  === '#' ? CtxMenu.db : CtxMenu.collection;
		return items;
	}

	function getTabId(val, prefix, suffix) {
		var tabId = btoa(val).replace(/[=]/g, '_');
		prefix && (tabId = prefix+tabId);
		suffix && (tabId = tabId+suffix);
		return tabId;
	}

	function showStats(dbName, colName) {
		$('.nav-tabs li').removeClass('active');
		$('.tab-pane').removeClass('active');

		var path = dbName;
		(colName) && (path += '/'+colName);
		var tabId = getTabId(path, 'stats__');

		if($('#'+tabId).length === 0) {
			$.get('/api/mongodb/stats/' + path, function(html) {
				curTabId = tabId;
				var tabTitle = 'stats: '+(colName || dbName);
				if(tabTitle.length > 30) tabTitle = tabTitle.substring(0, 20) + '...';
				$('.nav-tabs').append('<li role="presentation" class="active"><a href="#'+tabId+'" id="'+tabId+'__anc" aria-controls="'
						+tabId+'" role="tab" data-toggle="tab"><span class="glyphicon glyphicon-stats"></span> '
						+tabTitle+'<button class="close-tab close btn btn-xs" type="button"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button></a></li>');
				$('.tab-content').append(html);

				$('#'+tabId+'__anc').on('click', function() {
					$(this).tab('show');
					curTabId = $(this).attr('aria-controls');
					resizeResultBox(curTabId);
				});

				resultBox[tabId] = $('#'+tabId+'__res').codemirror({
					mode: { name:'javascript', json:true },
					lineNumbers: true,
					styleActiveLine: true,
					autoClearEmptyLines: true,
					matchBrackets: true,
					readOnly: true,
					theme: 'rubyblue'
				});
				resizeResultBox(tabId);

				$('#'+tabId+'__anc').click();
			});
		} else {
			$('#'+tabId+'__anc').click();
			curTabId = tabId;
		}
	}
	function createDatabase(dbName) {
		$.ajax({
			type: 'post',
			url: 'mongodb/db/'+dbName,
			success: function(result) {
				reloadTree();
				if(result.status === 200) {
				} else {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			},
			error: function(result) {
				console.log(result);
				reloadTree();
				if(result.message) {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			}
		});
	}
	function createCollection(dbName, colName) {
		$.ajax({
			type: 'post',
			url: 'mongodb/db/'+dbName+'/'+colName,
			success: function(result) {
				reloadTree();
				if(result.status === 200) {
					loadDocument(dbName+'/'+colName);
				} else {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			},
			error: function(result) {
				console.log(result);
				reloadTree();
				if(result.message) {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			}
		});
	}
	function addDocument(dbName, colName) {
		if(!docCodeMirror) {
			docCodeMirror = $('#document').codemirror({
				mode: { name:'javascript', json:true },
				lineNumbers: true,
				styleActiveLine: true,
				autoClearEmptyLines: true,
				matchBrackets: true,
				theme: 'rubyblue'
			});
		} else {
			docCodeMirror.getDoc().setValue($('#document').val());
			docCodeMirror.refresh();
		}
		$('#dbName').val(dbName);
		$('#colName').val(colName);
		$('#add-doc').modal('show');
		$('#add-doc').on('shown.bs.modal', function() {
			docCodeMirror.refresh();
			$('#content').css('position', 'absolute');
		});
		$('#add-doc').on('hidden.bs.modal', function() {
			$('#content').css('position', 'fixed');
		});
	}
	function updateDocument(dbName, colName) {
		var path = dbName+'/'+colName;
		var tabId = getTabId(path, 'col__');
		if($('#'+tabId).length === 0) {
			loadDocument(path, false, function() {
				changeCommand(tabId, 'update');
			});
		} else {
			$('#'+tabId+'__anc').click();
			changeCommand(tabId, 'update');
			curTabId = tabId;
		}
	}
	function changeCommand(tabId, value) {
		$('#'+tabId+'__cmd').selectpicker('val', value);
		var selected = $('#'+tabId+'__cmd').find("option:selected").val();
		commandChanged(tabId, selected);
	}
	function renameDatabase(oldName, dbName) {
		$.ajax({
			type: 'put',
			url: 'mongodb/db/'+dbName,
			data: { collection: oldName },
			success: function(result) {
				reloadTree();
				if(result.status === 200) {
				} else {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			},
			error: function(result) {
				console.log(result);
				reloadTree();
				if(result.message) {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			}
		});
	}
	function renameCollection(dbName, oldName, colName) {
		$.ajax({
			type: 'put',
			url: 'mongodb/db/'+dbName+'/'+oldName,
			data: { collection: colName },
			success: function(result) {
				reloadTree();
				if(result.status === 200) {
					loadDocument(dbName+'/'+colName);
					$('#dbTree').jstree(true).search(colName);
				} else {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			},
			error: function(result) {
				console.log(result);
				reloadTree();
				if(result.message) {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			}
		});
	}
	function dropConfirm(node, title, msg) {
		var tree = $('#dbTree').jstree(true);
		$('#del-btn').unbind('click');
		$('#del-btn').bind('click', function(e) {
			tree.delete_node(node);
		});
		$('#del-model-label').text(title);
		$('#del-model-body').text(msg);
		$('#del-confirm').modal('show').on('shown.bs.modal', function() {
			$('#content').css('position', 'absolute');
		}).on('hidden.bs.modal', function() {
			$('#content').css('position', 'fixed');
		});
	}
	function removeAllDocuments(node, title, msg) {
		var tree = $('#dbTree').jstree(true);
		$('#del-btn').unbind('click');
		$('#del-btn').bind('click', function(e) {
			deleteContents(node.parent, node.text, '_all');
		});
		$('#del-model-label').text(title);
		$('#del-model-body').text(msg);
		$('#del-confirm').modal('show').on('shown.bs.modal', function() {
			$('#content').css('position', 'absolute');
		}).on('hidden.bs.modal', function() {
			$('#content').css('position', 'fixed');
		});
	}
	function deleteContents(dbName, colName, docId) {
		var url = 'mongodb/db/'+dbName;
		var $tab;
		if(colName) {
			url += '/'+colName;
			docId && (url += '/'+docId);
			var tabId = getTabId(dbName+'/'+colName, 'col__', '__anc');
			$tab = $('#' + tabId);
		}

		$.ajax({
			type: 'delete',
			url: url,
			contentType: 'application/json',
			success: function(result) {
				$('#del-confirm').modal('hide').data( 'bs.modal', null );
				$('.modal-backdrop').remove();
				reloadTree();
				if(result.status === 200) {
					$tab && closeTab($tab);
				} else {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			},
			error: function(result) {
				console.log(result);
				$('#del-confirm').modal('hide').data( 'bs.modal', null );
				$('.modal-backdrop').remove();
				reloadTree();
				if(result.message) {
					$('#alertModalBody').html('<p>'+result.message+'</p>');
					$('#alertModel').modal('show');
				}
			}
		});
	}

	function loadDocument(path, refresh, cb) {
		if(!path || path.split('/').length < 2) return;

		refresh && closeTab($('#'+getTabId(path, 'col__', '__anc')));

		$('.nav-tabs li').removeClass('active');
		$('.tab-pane').removeClass('active');

		var tabId = getTabId(path, 'col__');
		if($('#'+tabId).length === 0) {
			$.get('/api/mongodb/' + path, function (html) {
				renderDocument(tabId, path, html, cb);
			});
		} else {
			$('#'+tabId+'__anc').click();
			curTabId = tabId;
			if(cb) cb();
		}
	}

	function renderDocument(tabId, path, html, cb) {
		curTabId = tabId;
		var tabTitle = path.split('/')[1];
		if(tabTitle.length > 30) tabTitle = tabTitle.substring(0, 20) + '...';
		$('.nav-tabs').append('<li role="presentation" class="active"><a href="#'+tabId+'" id="'+tabId+'__anc" aria-controls="'
				+tabId+'" role="tab" data-toggle="tab"><span class="glyphicon glyphicon-file"></span> '
				+tabTitle+'<button class="close-tab close btn btn-xs" type="button"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button></a></li>');
		$('.tab-content').append(html);

		$('#'+tabId+'__anc').on('click', function() {
			$(this).tab('show');
			curTabId = $(this).attr('aria-controls');
			resizeResultBox(curTabId);
		});

		$('#'+tabId+'__pop').popover({
			html: true,
			content: function() {
				return $('#'+tabId+'__pop_content').html();
			}
		});

		$('#'+tabId+'__cmd').selectpicker({ style: 'btn-default', size: 7 });
		$('#'+tabId+'__cmd').on('change', function(e) {
			var selected = $(this).find("option:selected").val();
			commandChanged(tabId, selected);
		});

		$('#'+tabId+'__exec').on('click', function(e) {
			execQuery(tabId, path, 0, 50);
		});
		$('#'+tabId+'__prev').on('click', function(e) {
			execQueryPrev(tabId, path);
		});
		$('#'+tabId+'__next').on('click', function(e) {
			execQueryNext(tabId, path);
		});
		$('#'+tabId+'__skip').on('change', function(e) {
			execQuery(tabId, path);
		});

		queryBox[tabId] = $('#'+tabId+'__query').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: false,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			theme: 'xq-light'
		});
		queryBox[tabId].on('changes', function(instance, changes) {
			resizeResultBox(curTabId);
		});
		docBox[tabId] = $('#'+tabId+'__doc').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: false,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			theme: 'xq-light'
		});
		docBox[tabId].on('changes', function(instance, changes) {
			resizeResultBox(curTabId);
		});
		optionBox[tabId] = $('#'+tabId+'__option').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: false,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			theme: 'xq-light'
		});
		optionBox[tabId].on('changes', function(instance, changes) {
			resizeResultBox(curTabId);
		});
		resultBox[tabId] = $('#'+tabId+'__res').codemirror({
			mode: { name:'javascript', json:true },
			lineNumbers: true,
			styleActiveLine: true,
			autoClearEmptyLines: true,
			matchBrackets: true,
			readOnly: true,
			theme: 'rubyblue'
		});
		resizeResultBox(tabId);

		$('#'+tabId+'__query_btn').on('click', function(e) {
			$(this).parent().find('.CodeMirror').toggle();
			var id = $(this).attr('id');
			resizeResultBox(id.substring(0, id.indexOf('__query_btn')));
		});
		$('#'+tabId+'__doc_btn').on('click', function(e) {
			$(this).parent().find('.CodeMirror').toggle();
			var id = $(this).attr('id');
			resizeResultBox(id.substring(0, id.indexOf('__doc_btn')));
		});
		$('#'+tabId+'__opt_btn').on('click', function(e) {
			$(this).parent().find('.CodeMirror').toggle();
			var id = $(this).attr('id');
			resizeResultBox(id.substring(0, id.indexOf('__opt_btn')));
		});

		$('#'+tabId+'__anc').click();

		if(cb) cb();
	}

	function commandChanged(tabId, selected) {
		if(selected === 'find') {
			$('#'+tabId+'__exbtn').addClass('left');
			$('#'+tabId+'__pg').show();
			$('#'+tabId+'__query_btn').parent().show();
			$('#'+tabId+'__doc_btn').parent().hide();
		} else {
			$('#'+tabId+'__exbtn').removeClass('left');
			$('#'+tabId+'__pg').hide();
			if(selected === 'insert') {
				$('#'+tabId+'__query_btn').parent().hide();
				$('#'+tabId+'__doc_btn').parent().show();
			} else if(selected === 'update') {
				$('#'+tabId+'__query_btn').parent().show();
				$('#'+tabId+'__doc_btn').parent().show();
			} else {
				$('#'+tabId+'__query_btn').parent().show();
				$('#'+tabId+'__doc_btn').parent().hide();
			}
		}
	}

	function replaceQstr(qstr) {
		var _m, _o;
		_m = /ISODate\s*\(\s*"([-:.0-9A-Za-z]+)"\s*\)/i;
		_o = qstr.match(_m);
		while(_o) {
			qstr = qstr.replace(_m, '"ISODate(\\"'+_o[1]+'\\")"');
			_o = qstr.match(_m);
		}

		_m = /ObjectId\s*\(\s*"([-:.0-9A-Za-z]+)"\s*\)/i;
		_o = qstr.match(_m);
		while(_o) {
			qstr = qstr.replace(_m, '"ObjectId(\\"'+_o[1]+'\\")"');
			_o = qstr.match(_m);
		}

		_m = /Code\s*\(\s*"([\n\r\s()*+,-.0-9:;A-Z\[\]a-z{}]+)"\s*\)/i;
		_o = qstr.match(_m);
		while(_o) {
			qstr = qstr.replace(_m, '"Code(\\"'+_o[1]+'\\")"');
			_o = qstr.match(_m);
		}
		return qstr;
	}

	function execQuery(tabId, path, skip, limit) {
		(skip === undefined) && (skip = parseInt($('#'+tabId+'__skip').val() || 0, 10));
		(limit === undefined) && (limit = parseInt($('#'+tabId+'__limit').val() || 50, 10));

		var cmd = $('#'+tabId+'__cmd').val() || 'find';
		var qstr;
		var data = {};
		if(cmd !== 'insert') {
			qstr = queryBox[tabId].getDoc().getValue();
			if(qstr && qstr.length) {
				try {
					data.condition = JSON.parse(replaceQstr(qstr));
				} catch(err) {
					BSAlert('danger', err.toString(), '#alert-div');
					return;
				}
			}
		}
		if(cmd === 'insert' || cmd === 'update') {
			qstr = docBox[tabId].getDoc().getValue();
			if(qstr && qstr.length) {
				try {
					data.document = JSON.parse(replaceQstr(qstr));
				} catch(err) {
					BSAlert('danger', err.toString(), '#alert-div');
					return;
				}
			}
		}
		qstr = optionBox[tabId].getDoc().getValue();
		if(qstr && qstr.length) {
			try {
				data.options = JSON.parse(qstr);
			} catch(err) {
				BSAlert('danger', err.toString(), '#alert-div');
				return;
			}
		}
		$.ajax({
			type: 'post',
			url: '/api/mongodb/'+path+'?cmd='+cmd+'&skip='+skip+'&limit='+limit,
			contentType: 'application/json',
			data: JSON.stringify(data),
			success: function(result) {
				//var docs = (result.status === 200) ? result.message.documents : result.message;
				var docs = result.message;
				resultBox[tabId].getDoc().setValue(docs);
				$('#'+tabId+'__skip').val(skip);
				$('#'+tabId+'__limit').val(limit);
			},
			error: function(result) {
				console.log(result);
				if(result.message) {
					BSAlert('danger', result.message, '#alert-div');
				}
			}
		});
	}
	function execQueryPrev(tabId, path) {
		var limit = parseInt($('#'+tabId+'__limit').val() || 50, 10);
		var skip = parseInt($('#'+tabId+'__skip').val() || 0, 10) - limit;
		(skip < 0) && (skip = 0);
		execQuery(tabId, path, skip, limit);
	}
	function execQueryNext(tabId, path) {
		var limit = parseInt($('#'+tabId+'__limit').val() || 50, 10);
		var skip = parseInt($('#'+tabId+'__skip').val() || 0, 10) + limit;
		execQuery(tabId, path, skip, limit);
	}

	function resizeApp() {
		var barWidth = $('#dbTree').outerWidth(true);
		var bodyMargin = parseInt($('#content').css('margin-left'), 10);
		var newBodyWidth = $(window).width() - barWidth - bodyMargin;
		$('#content').css('left', barWidth);
		$('#content').css('width', newBodyWidth);

		$('#dbTree').height($(window).height() - $('#dbTree').offset().top);
		var contentHeight = $(window).height() - $('#content').offset().top;
		$('#content').css('height', contentHeight);
		$('#sidebarResize').css('height', $('#tree').css('height'));

		resizeResultBox(curTabId);
	}

	function resizeResultBox(tabId) {
		if(!tabId) return;

		var hh = 40;
		var box_list = ['title-box', 'query-cmd', 'query-box', 'doc-box', 'opt-box', 'exec-box'];
		var box_h;
		box_list.forEach(function(box) {
			if($('#'+tabId+' .'+box).css('display') !== 'none') {
				box_h = $('#'+tabId+' .'+box).outerHeight(true);
				//box_h = $('#'+tabId+' .'+box).height();
				box_h && (hh += box_h);
			}
		});

		var height = $(window).height() - $('.tab-content').offset().top - hh;
		(height < 300) && (height = 300);
		resultBox[tabId].setSize('100%', height);
	}

	function setupResizeEvents() {
		var sidebarResizing = false;
		var sidebarFrame = $("#tree").width();

		$('#dbTree').bind('resize', resizeApp);
		$(window).bind('resize', resizeApp);

		$(document).on('mouseup', function (e) {
			sidebarResizing = false;
			sidebarFrame = $("#tree").width();
			$('body').removeClass('select-disabled');
		});

		$('#sidebarResize').on('mousedown', function (e) {
			sidebarResizing = e.pageX;
			$('body').addClass('select-disabled');
		});

		$(document).on('mousemove', function (e) {
			if(sidebarResizing) {
				var w = sidebarFrame - (sidebarResizing - e.pageX);
				if(w > 240) {
					$('#tree').width(w);
					resizeApp();
				}
			}
		});
	}

</script>
</body>
</html>
